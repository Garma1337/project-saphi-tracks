//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "resources")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub author_id: i32,
    pub custom_track_id: i32,
    pub file_name: String,
    pub file_size: i32,
    pub resource_type: String,
    pub checksum: String,
    pub version: String,
    pub date_created: DateTime,
    pub verified: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::custom_tracks::Entity",
        from = "Column::CustomTrackId",
        to = "super::custom_tracks::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CustomTracks,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::AuthorId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::custom_tracks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CustomTracks.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
